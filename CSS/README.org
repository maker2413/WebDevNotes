#+TITLE: CSS

CSS or Cascading Style Sheets is used to describe how your HTML content should
be presented. The term cascading is used to note how the inheritance of
attributes is determined in CSS. By that I mean that if any parent attribute has
any CSS applied to it child attributes will automatically inherit them.

* Examples:
  - 1. :: [[./Essentials/index.html][Essentials of CSS]]
  - 2. :: [[./Intermediate/index.html][Intermediate CSS]]
  - 3. :: [[./Typography/index.html][Typography]]
  - 4. :: [[./Backgrounds/index.html][Backgrounds]]
  - 5. :: [[./AdvancedBackgrounds/index.html][Advanced Backgrounds]]
  - 6. :: [[./ResponsiveDesign/index.html][Responsive Web Design]]
  - 7. :: [[./ResponsiveGrids/index.html][Responsive Grid Design]]
  - 8. :: [[./Flexbox/index.html][Flexbox]]
  - 9. :: [[./GridLayout/index.html][Grid Layout]]
  - 10. :: [[./CSS3/index.html][CSS3 Special Effects]]

* CSS Properties
  CSS has too many properties to list here. I'm only going to document the
  common ones and the super useful ones:
  - ~align-content~: Sets the distribution of space between and around content
    items in a flexbox or grid
  - ~align-items~: Sets the alignment of items in a flexbox or grid
  - ~align-self~: Overrides a grid or flex item's ~align-items~
  - ~animation-direction~: Sets whether an animation should play forward,
    backwards, or alternate back and forth
  - ~animation-fill-mode~: Sets how a CSS animation applies styles to its
    targets before and after its execution
  - ~animation-iteration-count~: Controls the number of times an animation
    sequence should be played before stopping
  - ~animation-name~: Sets which animation should be applied to the element
  - ~animation-delay~: Controls the delay before an animation starts
  - ~animation-duration~: Controls the length of time for an animation to
    complete
  - ~background-color~: Controls the background color
    - Can be set a color by name, by hexadecimal, or by ~rgba~, which will allow
      us to set the opacity as well as the color
  - ~background-image~: Sets one or more background images on an element
  - ~background-position~: Sets the initial position for each background image
  - ~background-repeat~: Sets how background images are repeated
  - ~background-size~: Sets the size of the element's background image
  - ~border~: Controls the border around a box
  - ~border-radius~: A property that rounds the corners of an element's outer
    border edge
  - ~border-spacing~: Controls the spacing between borders
  - ~border-collapse~: Sets whether cells inside a table have shared or separate
    borders
  - ~border-radius~: Rounds the corners of an element's outer border edge
  - ~box-sizing~: Controls the total height and width of a box keeping in mind
    the margin, border, and padding
    - https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing
  - ~box-shadow~: Adds shadow effects around an element's
    frame. https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow
  - ~clear~: Controls whether an element must be moved below (cleared) floating
    elements
    - Over the years other methods have popped up to accomplish this at the
      parent level and have been dubbed "clearfix"
    - clearfix in its self has a storied history that can be read about here:
      https://css-tricks.com/clearfix-a-lesson-in-web-development-evolution/
  - ~color~: Controls the color of an item
    - Can be set a color by name, by hexadecimal, or by ~rgba~, which will allow
      us to set the opacity as well as the color
  - ~display~: Controls whether an element is treated as a block or inline box
  - ~flex~: Shorthand for the following flex items in the following order:
    - ~flex-grow~: Sets the flex grow factor:
      https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow
    - ~flex-shrink~: Sets the flex shrink factor:
      https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink
    - ~flex-basis~: Sets the initial main size of a flex item:
      https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis
  - ~flex-direction~: Specifies which direction we want elements to share
    space. By default this is set to =row=
  - ~flex-wrap~: Sets whether flex items are forced onto one line or can wrap
    onto multiple lines
  - ~float~: Makes a box float above surrounding items
    - If all items in a parent attribute are floating the parent attribute will
      act as if it contains no items
    - To force the parent attribute to consider floated elements refer to
      ~clear~
  - ~font-family~: Specifies a prioritized list of one or more font family names
    to be used
  - ~font-size~: Controls the font size
  - ~font-style~: Controls the style of a font like normal, italic, or oblique
  - ~font-weigth~: Set the weight (boldness) of a font
  - ~gap~: Shorthand for ~column-gap~ and ~row-gap~:
    - ~column-gap~: Sets the size of the gap (gutter) between an element's
      columns
    - ~row-gap~: Sets the size of the gap (gutter) between an element's rows
  - ~grid-column~: Shorthand for specifying grid item's size and location within
    a grid column
  - ~grid-row~: Shorthand for specifying grid item's size and location within
    a grid row
  - ~grid-template-areas~: Specifies named grid areas, establishing the cells in
    the grid and assigning them names
  - ~grid-template-columns~: Defines the line names and track sizing of grid
    columns
  - ~height~: Controls the height of a box
  - ~justify-content~: Defines how the browser distributes space between and
    around content items along a flex container
  - ~letter-spacing~: Sets the spacing between letters
  - ~line-height~: Sets the height of lines of text
  - ~list-style~: Controls the style of bullet points in a list
  - ~margin~: Controls the spacing around the outside of a box
    - Margin can be set manually on all 4 directions (left, right, top, bottom)
      or all 4 directions can be set in one line. If this is done the directions
      are defined clockwise (top, right, bottom, left):
      ~margin: 20px 40px 20px 40px;~  - ~max-width~: Controls the maximum allowed width
  - ~max-height~: Controls the maximum allowed height
  - ~max-width~: Controls the maximum allowed width
  - ~min-height~: Controls the minimum allowed height
  - ~min-width~: Controls the minimum allowed width
  - ~opacity~: Sets the opacity of an element
  - ~order~: Sets the order to lay out an item in a flex or grid container
  - ~outline~: Controls outline properties
  - ~overflow~: Set the desired behavior when content does not fit in the
    element's padding box
  - ~padding~: Controls the spacing between the content and the border of a box
    - Padding can be set manually on all 4 directions (left, right, top, bottom)
      or all 4 directions can be set in one line. If this is done the directions
      are defined clockwise (top, right, bottom, left):
      ~padding: 20px 40px 20px 40px;~
  - ~position~: Controls how an element is positioned in a document
    - ~top~: Controls the vertical position of a positioned element
    - ~right~: Controls the horizontal position of a positioned element
    - ~left~: Controls the horizontal position of a positioned element
    - ~bottom~: Controls the vertical position of a positioned element
    - Position absolute will search up the document to find the first parent
      element with ~position: relative~ and use that element as its frame of
      reference for positioning. If no relative parent found it will base it's
      positioning off of the page itself
    - Position relative will base its position off of itself within the current
      document
  - ~text-align~: Controls the alignment of text
    - ~vertical-align~: Controls the vertical alignment of text
  - ~text-decoration~: Controls the style of underline on an item
  - ~text-indent~: Sets the length of empty space (indentation) that is put
    before lines of text in a block
  - ~text-shadow~: Adds shadows to text.
    - It accepts the following inputs: ~offset-x offset-y blur-radius color~
  - ~text-transform~: Controls how to capitalize an element's text
    - Can be used to force uppercase or lowercase
  - ~transform~: Lets you rotate, scale, skew, or translate an element
  - ~transform-origin~: Sets the origin for an element's transform
  - ~transition-duration~: Used in conjunction with ~transition-property~ to
    control the length of time a transition should take to complete
  - ~transition-property~: Sets the CSS properties to which the transition
    effect should be applied
  - ~transition-timing-function~: Controls how intermediate values are
    calculated for CSS properties being affected by a transition effect
  - ~visibility~: Shows or hides and element without changing the layout
  - ~width~: Controls the width of a box
  - ~word-spacing~: Sets the spacing between words
  - ~z-index~: Sets the z-order of a positioned element (larger z-index will
    override any item with a small z-index)

* Tips:
  - Box Model: https://www.w3schools.com/css/css_boxmodel.asp
  - Targeting the =nth= child of an element:
    https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child
  - Targeting specific attributes:
    https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors
  - Form elements do not inherit font family settings from parent attributes.
  - Custom fonts can be added to your website with ~@font-face~:
    https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face
  - Gradients can be created with:
    https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient
  - When making a site work on devices of all sizes it is important to set
    ~viewport~: https://www.w3schools.com/css/css_rwd_viewport.asp
  - The ~@media~ rule can be used to set CSS rules that only apply under certain
    requirements: https://www.w3schools.com/cssref/atrule_media.php
  - A common design pattern in web development is the 12 column grid:
    https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Realizing_common_layouts_using_grids
  - Common viewport size abbreviations are as follows:
    - ~xs~: Extra small (Smartphones)
    - ~sm~: Small (Tablets)
    - ~md~: Medium (Laptop or medium monitor)
    - ~lg~: Large (Desktop large monitor)
  - Flexbox is a modern way to efficiently lay out, align, and distribute space
    among items in a container:
    https://css-tricks.com/snippets/css/a-guide-to-flexbox/
  - ~fr~ is a size measurement in CSS and it stands for fractional unit:
    https://www.digitalocean.com/community/tutorials/css-css-grid-layout-fr-unit
  - ~minmax()~: is a function that defines a size range greater than or equal to
    ~min~ and less than or equal to ~max~:
    https://developer.mozilla.org/en-US/docs/Web/CSS/minmax
  - Both FireFox and Chromium based browsers allow you to view a wire frame of a
    CSS grid using the developer tools:
    https://developer.chrome.com/docs/devtools/css/grid
  - It can be hard to remember the difference between ~align~ and ~justify~ when
    working with grids or flexbox. To make it easier you can think of word
    document editing software. In Word or Google sheets you can align text left,
    right, or center. You can also justify text, which will align the text
    squarely in center with no margins on the left or right of the text
  - ~repeat()~ is a CSS function that represents a repeated fragment of the
    track list allowing a large number of columns or rows that exhibit a
    recurring pattern to be written in a more compact form:
    https://developer.mozilla.org/en-US/docs/Web/CSS/repeat
  - ~inset~ is a property in CSS that is shorthand for ~top~, ~bottom~, ~right~,
    and ~left~: https://developer.mozilla.org/en-US/docs/Web/CSS/
  - ~@keyframes~ allows you to define rules for intermediate steps in a CSS
    animation sequence:
    https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes
  - To make animations work on older browsers and mobile devices copy and paste
    any keyframe blocks or animation shorthand and prepend ~-webkit-~ to the
    first block or shorthand
